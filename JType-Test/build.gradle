plugins {
	id 'java-library'
	id 'maven-publish'
	id("com.diffplug.eclipse.apt") version "3.44.0"
}

repositories {
	mavenCentral()
}

sourceCompatibility = 21
targetCompatibility = 21

version = "${project.JTypeVersion}"


dependencies {
	compileOnly project(':JType-Compiler')
}

// Configure annotation processing for the Eclipse IDE
eclipse{
        project {
            buildCommand("org.eclipse.buildship.core.gradleprojectbuilder")
            natures("org.eclipse.buildship.core.gradleprojectnature")
        }
        // Reset all Eclipse settings when "Refresh Gradle Project" is executed
        synchronizationTasks("cleanEclipse", "eclipse")
}

plugins.withType(JavaPlugin).configureEach {
	java {
		modularity.inferModulePath = true
	}
}

test {
	useJUnitPlatform()
}

task sourcesJar(type: Jar) {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

import org.apache.tools.ant.filters.ReplaceTokens
task processSource(type: Sync) {
	from sourceSets.main.java
	into "$buildDir/src"
	inputs.property 'JTypeVersion',  JTypeVersion;
	
	filter(ReplaceTokens, tokens: [JTypeVersion: JTypeVersion])
}

def exportedModules = project(':').exportedModules

def exportedTo = project(':').exportedTo

tasks.withType(JavaCompile) { compileTask ->
	def pluginJar = project(':JType-Compiler').tasks.getByName('jar').outputs.files.singleFile
	compileTask.doFirst {
		project.logger.lifecycle("Compiler plugin: " + project(':JType-Compiler').tasks.getByName('jar').outputs.files.singleFile)
		if (!pluginJar.exists()) {
		    throw new GradleException("Plugin JAR file does not exist: " + pluginJar)
		}
	}
    options.compilerArgs += [
    	'-verbose',
        '-Xplugin:JType'
    ]
    options.annotationProcessorPath += files(pluginJar)
    options.fork = true
    options.forkOptions.jvmArgs += [
    	'--module-path=' + files(pluginJar).asPath
    ]
}

task generateAntBuild {
    doLast {
    	project.logger.lifecycle("building");
        def antBuildFile = file('build.xml')
        def pluginJar = project(':JType-Compiler').tasks.getByName('jar').outputs.files.singleFile
        antBuildFile.text = """
        <project name="ExampleProject" basedir="." default="compile">
            <property name="src.dir" value="src/main/java"/>
            <property name="build.dir" value="build/classes/java/main"/>
            <property name="plugin.name" value="JType"/>

            <target name="init">
                <mkdir dir="\${build.dir}"/>
            </target>

            <target name="compile" depends="init">
                <javac srcdir="\${src.dir}" destdir="\${build.dir}" debug="true">
                    <compilerarg value="-Xplugin:\${plugin.name}"/>
                    <compilerarg value="-J--module-path"/>
                    <compilerarg value="${pluginJar}"/>
                    <compiler name="org.eclipse.jdt.core.JDTCompilerAdapter"/>
                </javac>
            </target>
        </project>
        """
    }
}

tasks.eclipse.dependsOn generateAntBuild

compileJava {
	source = processSource.outputs
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

artifacts {
    archives jar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}
